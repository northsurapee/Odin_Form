/* Suggestion : Use 'rem' for font-size and 'px' for everything else. */

/* Reset CSS */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed, 
figure, figcaption, footer, header, hgroup, 
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
	margin: 0;
	padding: 0;
	border: 0;
	font-size: 100%;
	font: inherit;
	vertical-align: baseline;
}

article, aside, details, figcaption, figure, 
footer, header, hgroup, menu, nav, section {
	display: block;
}
body {
	line-height: 1.2;
}
ol, ul {
	list-style: none;
}
blockquote, q {
	quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
	content: '';
	content: none;
}
table {
	border-collapse: collapse;
	border-spacing: 0;
}

/* Font face */
@font-face {
    font-family: "Norse Bold";
    src: url("resources/Norse-Bold.otf");
}

/* Whole Page */
body {
    /*
    Always use 'min-height: 100vh;'
    If the content inside the element requires more height than the viewport height, the element will expand to accommodate the content. (if just height: 100vh, element will disapear)
    If the content is less than the viewport height, the element will take up the entire viewport height.
    */
    min-height: 100vh; 
    display: flex;
    font-family: 'Roboto';
}

/* Left */
.left {
    background-image: url('resources/background.jpg'); 
    background-size: cover; /*the browser scales the background image to cover the entire container*/
    background-position: center center;
    
    flex: 3; /* 3:5 */
    display: flex;
    flex-direction: column;
    justify-content: space-between;
}

.banner {
    margin-top: 10rem;
    height: 11rem;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: rgba(0, 0, 0, 0.4);
}

.logo {
    height: 7.5rem;
}

.odin {
    color: white;
    font-size: 5.5rem;
    font-family: 'Norse-Bold', sans-serif;
}

p.credit {
    color: white;
    text-align: center;
    padding-bottom: 0.5rem;
}

a:visited {
    color: white; /* Keep it white */
}

/* Right */
.right {
    flex: 5;
    display: flex;
    flex-direction: column;
    justify-content: center;
    background-color: #f9fafb;;
}

.quote {
    display: flex;
    flex-direction: column;
    gap: 2rem;

    font-size: 1.25rem;
    margin: 2rem 0rem;
    font-weight: 500;
    max-width: 80%
}

em {
    font-style: italic;
}

h2 {
    font-size: 1.5rem;
}

form {
    display: flex;
    flex-direction: column;
}

.form-container {
    display: flex;
    flex-direction: column;
    padding: 1.5rem 2rem;
    background-color: white;
    gap: 1rem;
    box-shadow: 10px 3px 5px lightgray;
}

.input-row {
    display: flex;
    /* 
    For wrap flex-box
    gap : not work because, some part will have unequal gap
    
    Before wrap
    x {gap2} x
    {gap1}
    y {gap2} y
    {gap1}

    After wrap (WRONG)
    x
    {gap2}
    x
    {gap1}
    y
    {gap2}
    y

    column-gap, row-gap : work! because, when flex-item is wrapped it will have just row-gap apply to it.

    Before wrap
    x{column-gap}x
    {row-gap}
    y{column-gap}y
    {row-gap}
     
    After wrap (CORRECT)
    x
    {row-gap}
    x
    {row-gap}
    y
    {row-gap}
    y
    {row-gap}

    */
    column-gap: 3rem;
    row-gap: 1rem;
    flex-wrap: wrap;
}

.input-container {
    display: flex;
    flex-direction: column;
    font-size: 0.7rem;
    letter-spacing: 0.05rem;
    gap: 0.2rem;
}

input {
    font-size: 1rem;
    color: #333;
    padding: 0.5rem 0.7rem;
    width: 17rem;
    border: 1px solid #E5E7EB;
    border-radius: 0.4rem;
}

button {
    margin: 2rem 2rem;
    width: 12rem;
    height: 2.5rem;

    background-color: #596D48;
    color: white;
    font-weight: bold;
    border-radius: 0.5rem;
    border: none;

    box-shadow: 3px 3px 3px lightgray;
    cursor: pointer;

}

.right p {
    margin-left: 2rem;
}

strong {
    color: #596D48;
    font-weight: bold;
    cursor: pointer;
}

/* input when we focus on it! */
input:focus {
    border: 1px solid green;
    box-shadow: 0 0 5px rgb(0,0,0,.3);
    outline: none;
}

.error {
    height: 1rem;
    color: red;
}

/* Responsive */
button,
a,
strong {
    transition: transform 0.05s ease-in-out;
}

button:hover,
a:hover,
strong:hover {
    transform: scale(1.05); /* Increase the size on hover */
    opacity: 0.8;
}